#
# From https://github.com/minio/minio/blob/master/docs/orchestration/kubernetes/minio-standalone-deployment.yaml
#

apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio
spec:
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
        # This label is used as a selector in Service definition
        app: minio
    spec:
      volumes:
      - name: secret-volume
        secret:
          secretName: tls-ssl-minio
          items:
          - key: public.crt
            path: public.crt
          - key: private.key
            path: private.key
          - key: public.crt
            path: CAs/public.crt
      # Volumes used by this deployment
      # volumes:
      # - name: data
      #   # This volume is based on PVC
      #   persistentVolumeClaim:
      #     # Name of the PVC created earlier
      #     claimName: minio-pv-claim
      containers:
      - name: minio
        # Volume mounts for this container
        # volumeMounts:
        # # Volume 'data' is mounted to path '/data'
        # - name: data 
        #   mountPath: "/data"
        # Pulls the lastest Minio image from Docker Hub
        image: minio/minio:RELEASE.2019-10-12T01-39-57Z
        # store data in tmp dir (any user can write there...)
        args:
        - server
        - /tmp
        env:
        # MinIO access key and secret key
        - name: MINIO_ACCESS_KEY
          value: "minio"
        - name: MINIO_SECRET_KEY
          value: "minio123"
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: secret-volume
          mountPath: /root/.minio/certs
        # Readiness probe detects situations when MinIO server instance
        # is not ready to accept traffic. Kubernetes doesn't forward
        # traffic to the pod while readiness checks fail.
        # readinessProbe:
        #   httpGet:
        #     path: /minio/health/ready
        #     port: 9000
        #   initialDelaySeconds: 120
        #   periodSeconds: 20
        # Liveness probe detects situations where MinIO server instance
        # is not working properly and needs restart. Kubernetes automatically
        # restarts the pods if liveness checks fail.
        # livenessProbe:
        #   httpGet:
        #     path: /minio/health/live
        #     port: 9000
        #   initialDelaySeconds: 120
        #   periodSeconds: 20